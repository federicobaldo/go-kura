// Code generated by protoc-gen-go.
// source: kurapayload.proto
// DO NOT EDIT!

/*
Package kuradatatypes is a generated protocol buffer package.


To compile:
protoc --proto_path=src/main/protobuf --java_out=src/main/java src/main/protobuf/kurapayload.proto


It is generated from these files:
	kurapayload.proto

It has these top-level messages:
	KuraPayload
*/
package kuradatatypes

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type KuraPayload_KuraMetric_ValueType int32

const (
	KuraPayload_KuraMetric_DOUBLE KuraPayload_KuraMetric_ValueType = 0
	KuraPayload_KuraMetric_FLOAT  KuraPayload_KuraMetric_ValueType = 1
	KuraPayload_KuraMetric_INT64  KuraPayload_KuraMetric_ValueType = 2
	KuraPayload_KuraMetric_INT32  KuraPayload_KuraMetric_ValueType = 3
	KuraPayload_KuraMetric_BOOL   KuraPayload_KuraMetric_ValueType = 4
	KuraPayload_KuraMetric_STRING KuraPayload_KuraMetric_ValueType = 5
	KuraPayload_KuraMetric_BYTES  KuraPayload_KuraMetric_ValueType = 6
)

var KuraPayload_KuraMetric_ValueType_name = map[int32]string{
	0: "DOUBLE",
	1: "FLOAT",
	2: "INT64",
	3: "INT32",
	4: "BOOL",
	5: "STRING",
	6: "BYTES",
}
var KuraPayload_KuraMetric_ValueType_value = map[string]int32{
	"DOUBLE": 0,
	"FLOAT":  1,
	"INT64":  2,
	"INT32":  3,
	"BOOL":   4,
	"STRING": 5,
	"BYTES":  6,
}

func (x KuraPayload_KuraMetric_ValueType) Enum() *KuraPayload_KuraMetric_ValueType {
	p := new(KuraPayload_KuraMetric_ValueType)
	*p = x
	return p
}
func (x KuraPayload_KuraMetric_ValueType) String() string {
	return proto.EnumName(KuraPayload_KuraMetric_ValueType_name, int32(x))
}
func (x *KuraPayload_KuraMetric_ValueType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(KuraPayload_KuraMetric_ValueType_value, data, "KuraPayload_KuraMetric_ValueType")
	if err != nil {
		return err
	}
	*x = KuraPayload_KuraMetric_ValueType(value)
	return nil
}
func (KuraPayload_KuraMetric_ValueType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 0, 0}
}

type KuraPayload struct {
	Timestamp        *int64                    `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Position         *KuraPayload_KuraPosition `protobuf:"bytes,2,opt,name=position" json:"position,omitempty"`
	Metric           []*KuraPayload_KuraMetric `protobuf:"bytes,5000,rep,name=metric" json:"metric,omitempty"`
	Body             []byte                    `protobuf:"bytes,5001,opt,name=body" json:"body,omitempty"`
	XXX_extensions   map[int32]proto.Extension `json:"-"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *KuraPayload) Reset()                    { *m = KuraPayload{} }
func (m *KuraPayload) String() string            { return proto.CompactTextString(m) }
func (*KuraPayload) ProtoMessage()               {}
func (*KuraPayload) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

var extRange_KuraPayload = []proto.ExtensionRange{
	{3, 4999},
}

func (*KuraPayload) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_KuraPayload
}
func (m *KuraPayload) ExtensionMap() map[int32]proto.Extension {
	if m.XXX_extensions == nil {
		m.XXX_extensions = make(map[int32]proto.Extension)
	}
	return m.XXX_extensions
}

func (m *KuraPayload) GetTimestamp() int64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *KuraPayload) GetPosition() *KuraPayload_KuraPosition {
	if m != nil {
		return m.Position
	}
	return nil
}

func (m *KuraPayload) GetMetric() []*KuraPayload_KuraMetric {
	if m != nil {
		return m.Metric
	}
	return nil
}

func (m *KuraPayload) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

type KuraPayload_KuraMetric struct {
	Name             *string                           `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Type             *KuraPayload_KuraMetric_ValueType `protobuf:"varint,2,req,name=type,enum=kuradatatypes.KuraPayload_KuraMetric_ValueType" json:"type,omitempty"`
	DoubleValue      *float64                          `protobuf:"fixed64,3,opt,name=double_value" json:"double_value,omitempty"`
	FloatValue       *float32                          `protobuf:"fixed32,4,opt,name=float_value" json:"float_value,omitempty"`
	LongValue        *int64                            `protobuf:"varint,5,opt,name=long_value" json:"long_value,omitempty"`
	IntValue         *int32                            `protobuf:"varint,6,opt,name=int_value" json:"int_value,omitempty"`
	BoolValue        *bool                             `protobuf:"varint,7,opt,name=bool_value" json:"bool_value,omitempty"`
	StringValue      *string                           `protobuf:"bytes,8,opt,name=string_value" json:"string_value,omitempty"`
	BytesValue       []byte                            `protobuf:"bytes,9,opt,name=bytes_value" json:"bytes_value,omitempty"`
	XXX_unrecognized []byte                            `json:"-"`
}

func (m *KuraPayload_KuraMetric) Reset()                    { *m = KuraPayload_KuraMetric{} }
func (m *KuraPayload_KuraMetric) String() string            { return proto.CompactTextString(m) }
func (*KuraPayload_KuraMetric) ProtoMessage()               {}
func (*KuraPayload_KuraMetric) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func (m *KuraPayload_KuraMetric) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *KuraPayload_KuraMetric) GetType() KuraPayload_KuraMetric_ValueType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return KuraPayload_KuraMetric_DOUBLE
}

func (m *KuraPayload_KuraMetric) GetDoubleValue() float64 {
	if m != nil && m.DoubleValue != nil {
		return *m.DoubleValue
	}
	return 0
}

func (m *KuraPayload_KuraMetric) GetFloatValue() float32 {
	if m != nil && m.FloatValue != nil {
		return *m.FloatValue
	}
	return 0
}

func (m *KuraPayload_KuraMetric) GetLongValue() int64 {
	if m != nil && m.LongValue != nil {
		return *m.LongValue
	}
	return 0
}

func (m *KuraPayload_KuraMetric) GetIntValue() int32 {
	if m != nil && m.IntValue != nil {
		return *m.IntValue
	}
	return 0
}

func (m *KuraPayload_KuraMetric) GetBoolValue() bool {
	if m != nil && m.BoolValue != nil {
		return *m.BoolValue
	}
	return false
}

func (m *KuraPayload_KuraMetric) GetStringValue() string {
	if m != nil && m.StringValue != nil {
		return *m.StringValue
	}
	return ""
}

func (m *KuraPayload_KuraMetric) GetBytesValue() []byte {
	if m != nil {
		return m.BytesValue
	}
	return nil
}

type KuraPayload_KuraPosition struct {
	Latitude         *float64 `protobuf:"fixed64,1,req,name=latitude" json:"latitude,omitempty"`
	Longitude        *float64 `protobuf:"fixed64,2,req,name=longitude" json:"longitude,omitempty"`
	Altitude         *float64 `protobuf:"fixed64,3,opt,name=altitude" json:"altitude,omitempty"`
	Precision        *float64 `protobuf:"fixed64,4,opt,name=precision" json:"precision,omitempty"`
	Heading          *float64 `protobuf:"fixed64,5,opt,name=heading" json:"heading,omitempty"`
	Speed            *float64 `protobuf:"fixed64,6,opt,name=speed" json:"speed,omitempty"`
	Timestamp        *int64   `protobuf:"varint,7,opt,name=timestamp" json:"timestamp,omitempty"`
	Satellites       *int32   `protobuf:"varint,8,opt,name=satellites" json:"satellites,omitempty"`
	Status           *int32   `protobuf:"varint,9,opt,name=status" json:"status,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *KuraPayload_KuraPosition) Reset()                    { *m = KuraPayload_KuraPosition{} }
func (m *KuraPayload_KuraPosition) String() string            { return proto.CompactTextString(m) }
func (*KuraPayload_KuraPosition) ProtoMessage()               {}
func (*KuraPayload_KuraPosition) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 1} }

func (m *KuraPayload_KuraPosition) GetLatitude() float64 {
	if m != nil && m.Latitude != nil {
		return *m.Latitude
	}
	return 0
}

func (m *KuraPayload_KuraPosition) GetLongitude() float64 {
	if m != nil && m.Longitude != nil {
		return *m.Longitude
	}
	return 0
}

func (m *KuraPayload_KuraPosition) GetAltitude() float64 {
	if m != nil && m.Altitude != nil {
		return *m.Altitude
	}
	return 0
}

func (m *KuraPayload_KuraPosition) GetPrecision() float64 {
	if m != nil && m.Precision != nil {
		return *m.Precision
	}
	return 0
}

func (m *KuraPayload_KuraPosition) GetHeading() float64 {
	if m != nil && m.Heading != nil {
		return *m.Heading
	}
	return 0
}

func (m *KuraPayload_KuraPosition) GetSpeed() float64 {
	if m != nil && m.Speed != nil {
		return *m.Speed
	}
	return 0
}

func (m *KuraPayload_KuraPosition) GetTimestamp() int64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *KuraPayload_KuraPosition) GetSatellites() int32 {
	if m != nil && m.Satellites != nil {
		return *m.Satellites
	}
	return 0
}

func (m *KuraPayload_KuraPosition) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func init() {
	proto.RegisterType((*KuraPayload)(nil), "kuradatatypes.KuraPayload")
	proto.RegisterType((*KuraPayload_KuraMetric)(nil), "kuradatatypes.KuraPayload.KuraMetric")
	proto.RegisterType((*KuraPayload_KuraPosition)(nil), "kuradatatypes.KuraPayload.KuraPosition")
	proto.RegisterEnum("kuradatatypes.KuraPayload_KuraMetric_ValueType", KuraPayload_KuraMetric_ValueType_name, KuraPayload_KuraMetric_ValueType_value)
}

var fileDescriptor0 = []byte{
	// 478 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x92, 0xdd, 0x6e, 0xd3, 0x30,
	0x14, 0xc7, 0xc9, 0x67, 0x93, 0xd3, 0x6e, 0x78, 0x86, 0x8b, 0x68, 0x57, 0xd3, 0x24, 0x68, 0xc5,
	0x45, 0x90, 0x0a, 0x9a, 0x04, 0x12, 0x17, 0x44, 0x0c, 0x34, 0x51, 0xd6, 0x89, 0x05, 0xa4, 0x5d,
	0x21, 0xa7, 0xf1, 0x4a, 0x84, 0x5b, 0x47, 0xb1, 0x83, 0xd4, 0x37, 0x28, 0xcf, 0xc1, 0x03, 0xf0,
	0x14, 0xbc, 0x17, 0xc7, 0x4e, 0x80, 0xf6, 0x0a, 0xee, 0xac, 0x9f, 0xff, 0xe7, 0xeb, 0x7f, 0x0e,
	0x1c, 0x7d, 0x69, 0x1b, 0x56, 0xb3, 0x8d, 0x90, 0xac, 0x4c, 0xeb, 0x46, 0x6a, 0x49, 0x0f, 0x0c,
	0x2a, 0x99, 0x66, 0x7a, 0x53, 0x73, 0x75, 0xfa, 0x3d, 0x80, 0xe1, 0x5b, 0x24, 0x57, 0x9d, 0x88,
	0x1e, 0x41, 0xac, 0xab, 0x15, 0x57, 0x9a, 0xad, 0xea, 0xc4, 0x39, 0x71, 0x26, 0x1e, 0x7d, 0x06,
	0x51, 0x2d, 0x55, 0xa5, 0x2b, 0xb9, 0x4e, 0x5c, 0x24, 0xc3, 0xe9, 0x38, 0xdd, 0x4b, 0x92, 0xee,
	0x24, 0xe8, 0xde, 0xbd, 0x9c, 0x9e, 0x41, 0xb8, 0xe2, 0xba, 0xa9, 0x16, 0xc9, 0x76, 0x7c, 0xe2,
	0x61, 0xe4, 0x83, 0x7f, 0x44, 0xbe, 0xb3, 0x6a, 0x7a, 0x00, 0x7e, 0x21, 0xcb, 0x4d, 0xf2, 0x6d,
	0x8c, 0xf5, 0x46, 0xc7, 0x3f, 0x5d, 0x80, 0x9d, 0xdf, 0x11, 0xf8, 0x6b, 0xb6, 0xe2, 0xd8, 0x9e,
	0x3b, 0x89, 0xe9, 0x0b, 0xf0, 0x4d, 0x2e, 0x6c, 0xcd, 0x9d, 0x1c, 0x4e, 0x1f, 0xff, 0x57, 0x81,
	0xf4, 0x23, 0x13, 0x2d, 0xcf, 0x51, 0x41, 0xef, 0xc3, 0xa8, 0x94, 0x6d, 0x21, 0xf8, 0xa7, 0xaf,
	0x86, 0x25, 0x1e, 0x56, 0x74, 0xe8, 0x3d, 0x18, 0xde, 0x62, 0x8c, 0xee, 0xa1, 0x8f, 0xd0, 0xa5,
	0x14, 0x40, 0xc8, 0xf5, 0xb2, 0x67, 0x81, 0x35, 0x07, 0xfd, 0xaa, 0xd6, 0xbf, 0x65, 0x21, 0xa2,
	0xc0, 0xc8, 0x0a, 0x29, 0x45, 0xcf, 0x06, 0xc8, 0x22, 0x53, 0x45, 0x61, 0xe1, 0x3f, 0xc1, 0x11,
	0xd2, 0xd8, 0x54, 0x29, 0x36, 0x9a, 0xab, 0x1e, 0xc6, 0x66, 0xd8, 0xd3, 0x1b, 0x88, 0xff, 0x76,
	0x07, 0x10, 0xbe, 0x9a, 0x7f, 0xc8, 0x66, 0xe7, 0xe4, 0x0e, 0x8d, 0x21, 0x78, 0x3d, 0x9b, 0xbf,
	0xcc, 0x89, 0x63, 0x9e, 0x17, 0x97, 0xf9, 0xd9, 0x53, 0xe2, 0xf6, 0xcf, 0x27, 0x53, 0xe2, 0xd1,
	0x08, 0xfc, 0x6c, 0x3e, 0x9f, 0x11, 0xdf, 0x84, 0x5d, 0xe7, 0xef, 0x2f, 0x2e, 0xdf, 0x90, 0xc0,
	0x08, 0xb2, 0x9b, 0xfc, 0xfc, 0x9a, 0x84, 0xc7, 0x3f, 0x1c, 0x18, 0xed, 0xed, 0x87, 0x40, 0x24,
	0x98, 0xae, 0x74, 0x5b, 0x76, 0x6e, 0x3a, 0x66, 0x1e, 0x33, 0x63, 0x87, 0x5c, 0x8b, 0x50, 0xc4,
	0x44, 0x2f, 0xea, 0xdc, 0x41, 0x51, 0xdd, 0xf0, 0x45, 0xa5, 0xcc, 0x49, 0xf8, 0x16, 0xdd, 0x85,
	0xc1, 0x67, 0xce, 0x4a, 0x9c, 0xd0, 0x1a, 0xe3, 0xe0, 0x0a, 0x03, 0x55, 0x73, 0x5e, 0x5a, 0x53,
	0x9c, 0xfd, 0xbb, 0x1a, 0x58, 0xeb, 0xb0, 0x4b, 0xc5, 0x34, 0x17, 0xa2, 0x42, 0x0b, 0xac, 0x23,
	0x01, 0x3d, 0x84, 0x10, 0x25, 0xba, 0x55, 0xd6, 0x8c, 0xe0, 0x51, 0x10, 0x79, 0x64, 0x3b, 0xce,
	0x9e, 0xc3, 0x43, 0xd9, 0x2c, 0x53, 0xbe, 0x10, 0x55, 0xad, 0xb8, 0x5d, 0x71, 0xba, 0x90, 0x0d,
	0x4f, 0x31, 0xa3, 0x62, 0x4b, 0xde, 0xdd, 0x76, 0xd1, 0xde, 0x66, 0x64, 0x67, 0xe1, 0x57, 0x06,
	0xfe, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x14, 0x10, 0xa3, 0x8c, 0x04, 0x03, 0x00, 0x00,
}
